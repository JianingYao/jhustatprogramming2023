---
title: "Functional Programming with `purrr`"
author: 
  - name: Stephanie Hicks
    url: https://www.stephaniehicks.com
    affiliation: Department of Biostatistics, Johns Hopkins
    affiliation_url: https://publichealth.jhu.edu
description: "Introduction to tools to work with functions and vectors in R"
date: 2023-11-28
categories: [module 3, week 6, functions, functional, programming, purrr]
knitr: true
---

<!-- Add interesting quote -->

# Pre-lecture materials

### Read ahead

::: callout-note
## Read ahead

**Before class, you can prepare by reading the following materials:**

1.  <https://adv-r.hadley.nz/functionals.html>
2.  <https://raw.githubusercontent.com/rstudio/cheatsheets/main/purrr.pdf>
:::

### Prerequisites
Before starting you must install the additional package:

* `purrr` - this provides a consistent functional programming interface to work with functions and vectors

You can do this by calling

```{r}
#| eval: false
install.packages("purrr")
```


### Acknowledgements

Material for this lecture was borrowed and adopted from

-   <https://adv-r.hadley.nz/fp.html>
-   <https://adv-r.hadley.nz/functionals.html>
-   <https://raw.githubusercontent.com/rstudio/cheatsheets/main/purrr.pdf>

# Learning objectives

::: callout-note
# Learning objectives

**At the end of this lesson you will:**

-   Be familiar with the concept of _functional languages_ and _functional styles_ of programming
-   Get comfortable with the major functions in  `purrr` (e.g. the `map` family of functions, `reduce`)
-   Write your loops with `map` functions instead of the `for` loop
:::

# Motivation 

If you have ever heard the phrase 

> "R is a __functional__ language."

you might have asked yourself what does this means exactly? Generally, this means that R lends itself nice to a particular __style__ of programming, namely a **functional style** of programming (will explain more below), which is often very helpful to the types of problems you encounter when doing a data analysis. 

## Functional programming language

A **functional style** of programming is contrast to a the formal definition of a **functional language** (or **functional programming**, which can be complementary to object-oriented programming), which are languages that use functions to create conditional expressions to perform specific computations. 

:::{.callout-note}

### Differences between functional and object-oriented programming

From [this resource](https://www.indeed.com/career-advice/career-development/functional-programming-languages) some differences are: 

- **Basic elements**: The fundamental elements of object-oriented languages are objects and methods, while the elements of functional programming are functions and variables. 

- **States**: Object-oriented languages can change objects within the program, which means it has states or current modifications that affect the result of inputs. Functional languages do not use imperative programming, so they do not keep track of current states.

- **Parallel programming**: This type of programming involves multiple computational processes occurring at the same time. Object-oriented languages have little support for parallel programming, but functional languages have extensive support for it.

- **Order**: In object-oriented programming, computations occur in a specific order. In functional programming, computations can occur in any order.

- **Iterative data**: Object-oriented programming uses loops, meaning repeated execution, for iterative data. Functional programming uses recursion for iterative data, meaning it attempts to solve problems using simpler versions of the same problem.

:::

A traditional weakness of functional languages are poorer performance and sometimes unpredictable memory usage, but these have been much reduced in recent years.


## Characteristics of a functional language

There are many definitions for precisely what makes a language functional, but there are two common threads and/or characteristics. 

### 1. First-class functions

At it is core, functional programming treats functions equally as other data structures, called **first class functions**. 

> In R, this means that you can do many of the things with a function that you can do with a vector: you can assign them to variables, store them in lists, pass them as arguments to other functions, create them inside functions, and even return them as the result of a function.

:::{.callout-tip}

### Examples of cool things you can do with functions in R

1. Assign a function to a variable (`foo`):

```{r}
foo <- function(){
  return("This is foo.")
}
class(foo)
foo
foo()
```

2. You can store functions in a `list`:

```{r}
foo_list <- list( 
  fun_1 = function() return("foo_1"),
  fun_2 = function() return("foo_2")
)

str(foo_list)
foo_list$fun_1()
foo_list$fun_2()
```

3. You can pass functions as arguments to other functions:

```{r}
shell_fn <- function(f) f()
shell_fn(foo_list$fun_1)
shell_fn(foo_list$fun_2)
```

4. You can **create functions inside of functions** and return them as the result of a function
```{r}
foo_wrap <- function(){
  foo_2 <- function(){
    return("This is foo_2.")
  }
  return(foo_2)
}

foo_wrap()
(foo_wrap())()
```

The bottom line, you can manipulate functions as the same way as you can to a vector or a matrix. 

:::

### 2. Pure functions

A function is **pure**, if it satisfies two properties:

* The output only depends on the inputs, i.e. if you call it again with the 
  same inputs, you get the same outputs. This excludes functions like `runif()`,
  `read.csv()`, or `Sys.time()` that can return different values.

* The function has no side-effects, like changing the value of a global 
  variable, writing to disk, or displaying to the screen. This excludes 
  functions like `print()`, `write.csv()` and `<-`.
 
Pure functions are much easier to reason about, but obviously have significant downsides: imagine doing a data analysis where you could not generate random numbers or read files from disk. 

:::{.callout-important}

To be clear, **R is not formally a functional programming language** as it does not require pure functions to be used when writing code. 

:::

So you might be asking yourself, why are we talking about this then? 

The formal definition of a functional programming language introduces a new style of programming, namely a **functional style** of programming. 

:::{.callout-note}

The key idea of a **functional style** is this programming style encourages programmers to write a big function as many smaller isolated functions, where each function addresses one specific task.

:::

You can always adopt a **functional style** for certain parts of your code! For example, this style of writing code motivates more humanly readable code, and recyclable code.

```{r}
#| eval: false

"data_set.csv" |> 
  import_data_from_file() |> 
  data_cleaning() |> 
  run_regression() |>
  model_diagnostics() |>
  model_visualization()

"data_set2.csv" |> 
  import_data_from_file() |> 
  data_cleaning() |> 
  run_different_regression() |>
  model_diagnostics() |>
  model_visualization()
```


## Functional style

At a high-level, a **functional style** is the concept of decomposing a big problem into smaller components, then solving each piece with a function or combination of functions. 

- When using a functional style, you strive to decompose components of the problem into isolated functions that operate independently. 
- Each function taken by itself is simple and straightforward to understand; complexity is handled by composing functions in various ways.

In this lecture, we will focus on one type of functional technique, namely **functionals** which are functions (like `lapply()`) that take another function as an argument. Functionals allow you to take a function that solves the problem for a single input and generalize it to handle any number of inputs. 

Functionals are by far and away the most important technique and you will use them all the time in data analysis.



# `purrr`: the functional programming toolkit

The R package `purrr`, as one important component of the [`tidyverse`](https://www.tidyverse.org/), provides a interface to manipulate vectors in the _functional style_.

> `purrr` enhances R's functional programming (FP) toolkit by providing a complete and consistent set of tools for working with functions and vectors.

::: callout-tip
### `purrr` cheatsheet
It is very difficult, if not impossible, to remember all functions that a package offers as well as their use cases. 

Hence, `purrr` developers offer a nice compact cheatsheet with visualizations at <https://github.com/rstudio/cheatsheets/blob/main/purrr.pdf>. 

Similar cheatsheets are available for other `tidyverse` packages.
:::

The most popular function in `purrr` is `map()` which iterates over the supplied data structure and apply a function during the iterations. Beside the `map` function,`purrr` also offers a series of useful functions to manipulate `list` the data structure.


## The `map` family
The `map` family of functions provides a convenient way to iterate through vectors or lists and apply functions during this iteration. Depending on the dimension of the input and the format of the output, there are many different variants of the basic `map` function.

::: callout-tip
### How does `map` relate to functional programming
Because their arguments include functions (`.f`) besides data (`.x`), `map` functions are considered as a convinient interface to implement functional programming.
:::


### `map` as a foor loop
```{r}
library(purrr)

triple <- function(x) x * 3

# for loop
loop_ret <- list()
for(i in 1:3){
  loop_ret[i] <- triple(i)
}

# map implementation
map_eg1 <- map(.x = 1:3, .f = triple)
map_eg2 <- map(.x = 1:3, .f = ~triple(.x))
map_eg3 <- map(.x = 1:3, .f = function(x) triple(x))

identical(loop_ret,map_eg1)
identical(loop_ret,map_eg2)
identical(loop_ret,map_eg3)
```

### `map` with a data frame
```{r}
tmp_dat <- data.frame(
  x = 1:5,
  y = 6:10
)

tmp_dat |> 
  map(.f = mean)

# Alternatively
# map(.x = tmp_dat, .f = mean)
```

::: callout-tip
### `data.frame` vs `list`
`data.frame` is a special case of `list`, where each column as one item of the list. Don't confuse with each row as an item.
```{r}
class(tmp_dat)
typeof(tmp_dat)
```
:::

### Extra arguments for functions
```{r}
tmp_dat2 <- as.list(tmp_dat)
tmp_dat2$y[6] <- NA
str(tmp_dat2)

tmp_dat2 |> map(.f = mean) # No extra arguments
tmp_dat2 |> 
  map(.f = mean, na.rm = TRUE) # With extra arguments
tmp_dat2 |> 
  map(.f = function(x, remove_na) mean(x, na.rm = remove_na),
      remove_na = TRUE)
```

### Stratified analysis with `map`
We use the `mtcars` from the package `datasets` to demonstrate
```{r}
library(datasets)
str(mtcars)

unique(mtcars$cyl) # different numbers of cylinders
```

We are interested in the averaged miles per gallon for vehicles with different numbers of cylinders
```{r}
# Create a dataset for cylinders level
str_dat <- mtcars |> split(mtcars$cyl)
length(str_dat)
str(str_dat)

str_dat |> 
  map(.f = ~mean(.x$mpg))
```
### Matrix as the output
The `map` family include functions that organize the output in different data structures, whose names follow the pattern `map_*`. As we've seen, the `map` function return a list. The following functions will return a vector of a specific kind, e.g. `map_lgl` returns a vector of logical variables, `map_chr` returns a vector of strings. It is also possible to return the the results as data frames by row binding (`map_dfr`) or column binding (`map_dfc`).

```{r}
str_dat |> 
  map_dbl(.f = ~mean(.x$mpg)) # returns a vector of doubles

str_dat |> 
  map_dfr(.f = ~colMeans(.x)) # return a data frame by row binding

str_dat |> 
  map_dfc(.f = ~colMeans(.x)) # return a data frame by col binding
```


### Multiple Input
It is possible that an operation requires a pair of variables as input. While it is still managable in `map` to achieve this, there are better options provided in `purrr`, specifically `map2` and `pmap`.

```{r}
map_avg <- map_dbl(.x = mtcars, .f = mean)

map2_avg <- map2_dbl(.x = mtcars,
                     .y = list(weight = 1/nrow(mtcars)),
                     .f = ~sum(.x*.y))
identical(map_avg, map2_avg)

pmap_avg <- pmap_dbl(list(x = mtcars,
                          y = list(weight = 1/(2*nrow(mtcars))),
                          z = list(weight2 = 2)),
                     .f = ~sum(..1*..2*..3))
identical(map_avg, pmap_avg)

# Use element names in pmap
mtcars$weight <- 1/2
mtcars$weight2 <-  2
pmap_eg2 <- pmap_dbl(mtcars,
                     .f = function(mpg, weight, weight2, ...){
                       mpg * weight * weight2
                     })

identical(pmap_eg2, mtcars$mpg)
```

### No output
It is possible that some operations don't need any output during the iteration, e.g. saving the dataset. In this case, `map` will force an output, e.g. `NULL`. One can consider using `walk` instead. The function `walk` behaves exactly the same as `map` but does not output anything. 
```{R}
tmp_fldr <- tempdir()


map2(.x = str_dat,
     .y = 1:length(str_dat),
     .f = ~saveRDS(.x, 
                   file = paste0(tmp_fldr, "/",.y, ".rds"))
)

# No output
walk2(.x = str_dat,
      .y = (1:length(str_dat)),
      .f = ~saveRDS(.x, 
                    file = paste0(tmp_fldr, "/",.y, ".rds"))
)
```

## Other functions in `purrr`
### `reduce` and `accumulate`
`purrr` also provides functions to summarize a list by a preferred operator, namesly `reduce`. Its variant `accumulate` provides the history of this reduction process.


```{r}
mtcars$weight <- 1/(2*nrow(mtcars))
mtcars$weight2 <-  2
reduce_eg <- 
  pmap_dbl(mtcars,
           .f = function(mpg, weight, weight2, ...){
             mpg * weight * weight2
           }) |> 
  reduce(`+`)

pmap_dbl(mtcars,
           .f = function(mpg, weight, weight2, ...){
             mpg * weight * weight2
           })|>
  head() |> # Only show the first 7 operations
  accumulate(`+`)
```

### Working with list

Let's move to the `purrr` cheatsheet at <https://github.com/rstudio/cheatsheets/blob/main/purrr.pdf>.

# Summary
* Introduction to functional programming.
* The R package `purrr` provides a nice interface to functional programming and list manipulation.
* The function `map` and its aternative `map_*` provide a neat way to iterate over a list or vector with the output in different data structures.
* The function `map2` and `pmap` allow having more than one list as input.
* The function `walk` and its alternatives `walk2`, `walk_*` do not provide any output.
* The functions `reduce` and `accumulate` help to summarize a list with a preferred operator or function.

<iframe src="https://giphy.com/embed/VEsfbW0pBu145PPhOi" width="480" height="400" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>

# Post-lecture materials

::: callout-note
### Questions
1. What does `imap` and `iwalk` do? In this lecture note, can you find the one example possible to substitute with `imap` and `iwalk`? Hint: see the sub-section named _No output_

1. Is there any function in the R base package provide nice interface for functional programming? Hint: `?with`, `?within`

2. Can you write a section of code to demonstrate the central limited theorem primarily using the `purrr` package and/or using the R base package?  
:::

### Additional Resources

::: callout-tip
-   <https://r4ds.had.co.nz/iteration.html>
-   <https://www.stat.umn.edu/geyer/8054/notes/functional.html>
:::
