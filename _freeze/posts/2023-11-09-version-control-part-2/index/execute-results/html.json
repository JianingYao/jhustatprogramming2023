{
  "hash": "235f6871cd5f57dc60671f62237853b1",
  "result": {
    "markdown": "---\ntitle: \"Version control (Part 2)\"\nauthor: \n  - name: Stephanie Hicks\n    url: https://stephaniehicks.com\n    affiliation: Department of Biostatistics, Johns Hopkins\n    affiliation_url: https://publichealth.jhu.edu\ndescription: \"Introduction to version control with git and GitHub (part 2)\"\ndate: 2023-11-09\ncategories: [module 1, week 3, version control, git, GitHub]\nknitr: true\n---\n\n\n# Pre-lecture materials\n\n::: callout-note\n## Read ahead\n\n**Before class, you can prepare by reading the following materials:**\n\n-   [Software Carpentry: Version Control with Git](https://swcarpentry.github.io/git-novice/)\n:::\n\n\n::: callout-note\n## Read ahead\n\nIn the previous lesson, we learned how to use git from the command line.\n\nIn this lesson, we will learn how to use git remotes and GitHub. As preparation, you can sign up for a [GitHub](https://github.com/) account if you do not already have one.\n\nWe will use the local git repository in the `planets` directory that we created in the previous lesson. If you do not have this any more, please create it by initializing the git repository and adding the set of git commits from the previous lesson.\n:::\n\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n-   [Software Carpentry: Version Control with Git](https://swcarpentry.github.io/git-novice/)\n\n\n# Learning objectives\n\n\n::: callout-note\n# Learning objectives\n\n**At the end of this lesson you will:**\n\n-   Understand git remotes.\n-   Understand how to use GitHub.\n-   Understand collaborating and merge conflicts.\n:::\n\n\n# Remotes in GitHub\n\n::: callout-note\n### Questions\n\n-   How do I share my changes with others on the web?\n:::\n\n\n::: callout-note\n### Objectives\n\n-   Explain what remote repositories are and why they are useful.\n-   Push to or pull from a remote repository.\n:::\n\n\nVersion control really comes into its own when we begin to collaborate with other people. We already have most of the machinery we need to do this; the only thing missing is to copy changes from one repository to another.\n\nSystems like Git allow us to move work between any two repositories. In practice, though, it's easiest to use one copy as a central hub, and to keep it on the web rather than on someone's laptop. Most programmers use hosting services like [GitHub](https://github.com/) to hold those main copies.\n\nLet's start by sharing the changes we've made to our current project (in the previous lesson) with the world. To this end we are going to create a _remote_ repository that will be linked to our local repository.\n\n\n## Create a remote repository\n\nLog in to GitHub, then click on the icon in the top right corner to create a new repository called `planets`.\n\n![](../../images/git/github-create-repo-01.png)\n\nName your repository \"planets\" and then click \"Create Repository\".\n\n::: callout-note\n\n- Since this repository will be connected to a local repository, it needs to be empty. \n- Leave \"Initialize this repository with a README\" unchecked, and keep \"None\" as options for both \"Add .gitignore\" and \"Add a license.\" \n- See the \"GitHub License and README files\" exercise in the Software Carpentry materials for a full explanation of why the repository needs to be empty.\n\n:::\n\n![](../../images/git/github-create-repo-02.png)\n\nAs soon as the repository is created, GitHub displays a page with a URL and some information on how to configure your local repository\n\n![](../../images/git/github-create-repo-03.png)\n\nThis effectively does the following on GitHub's servers:\n\n```bash\nmkdir planets\ncd planets\ngit init\n```\n\n\nIf you remember back to the previous lecture where we added and committed our earlier work on `mars.txt`, you can visualize that process in our local repository like this:\n\n![](../../images/git/git-staging-area.svg)\n\nNow that we have created the remote repository, we really have two repositories and this is the idea you should keep in mind:\n\n![](../../images/git/git-freshly-made-github-repo.svg)\n\n::: callout-note\n\nOur local repository still contains our earlier work on `mars.txt`, but the remote repository on GitHub appears empty as it does not contain any files yet.\n\n::: \n\nCheck that we still have our history of commits in the git repository from the previous lesson:\n\n```bash\ncd ~/Desktop/planets\ngit log --oneline\n```\n\n```default\nc687412 (HEAD -> main) Ignore data files and the results folder.\n1507c2a Add some initial thoughts on spaceships\nad5b7d1 Discuss concerns about Mars' climate for Mummy\n75a0e21 Add concerns about effects of Mars' moons on Wolfman\ncf69058 Start notes on Mars as a base\n```\n\n\n## Connect local to remote repository\n\nNow we connect the two repositories. We do this by making the GitHub repository a \"remote\" for the local repository. The home page of the repository on GitHub includes the URL string we need to identify it:\n\n![](../../images/git/github-find-repo-string.png)\n\nClick on the 'SSH' link to change the protocol from HTTPS to SSH.\n\n\n::: callout-warning\n### HTTPS vs. SSH\n\nWe use SSH here because, while it requires some additional configuration, it is a security protocol widely used by many applications. The steps below describe SSH at a minimum level for GitHub. A supplemental lesson in the Software Carpentry materials discusses advanced setup and concepts of SSH and key pairs, and other material supplemental to git related SSH.\n:::\n\n\n![](../../images/git/github-change-repo-string.png)\n\nCopy that URL from the browser, go into the local `planets` repository, and run this command:\n\n```bash\ngit remote add origin git@github.com:<username>/planets.git\n```\n\nMake sure to use the URL for your repository, i.e. your username.\n\n`origin` is a local name used to refer to the remote repository. It could be called anything, but `origin` is a convention that is often used by default in git and GitHub, so it's helpful to stick with this unless there's a reason not to.\n\nWe can check that the command has worked by running `git remote -v`:\n\n```bash\ngit remote -v\n```\n\n```default\norigin   git@github.com:stephaniehicks/planets.git (fetch)\norigin   git@github.com:stephaniehicks/planets.git (push)\n```\n\nWe'll discuss remotes in more detail in the next section, while talking about how they might be used for collaboration.\n\n\n## SSH Background and Setup\n\nBefore you can connect to a remote repository, you need to set up a way for your computer to authenticate with GitHub so it knows it's you trying to connect to your remote repository.\n\nThese sections below will not be covered in class, but you are encouraged to set up your SSH key pairs to make your lives easier using git/GitHub! \n\n::: {.callout-tip collapse=\"true\"}\n\n### What are SSH key pairs?\n\n\nWe are going to set up the method that is commonly used by many different services to authenticate access on the command line. This method is called Secure Shell Protocol (SSH). SSH is a cryptographic network protocol that allows secure communication between computers using an otherwise insecure network.\n\nSSH uses what is called a **key pair**. This is two keys that work together to validate access. One key is publicly known and called the public key, and the other key called the private key is kept private.\n\nWhat we will do now is the minimum required to set up the SSH keys and add the public key to a GitHub account.\n\nThe first thing we are going to do is check if this has already been done on the computer you are on. Because generally speaking, this setup only needs to happen once.\n\nWe will run the list command to check what key pairs already exist on your computer.\n\n```bash\nls -al ~/.ssh\n```\n\nYour output is going to look a little different depending on whether or not SSH has ever been set up on the computer you are using.\n\nIf you have not set up SSH on your computer, your output is\n\n```default\nls: cannot access '/c/Users/<username>/.ssh': No such file or directory\n```\n\nIf SSH has been set up on the computer you're using, the public and private key pairs will be listed. The file names are either `id_ed25519` / `id_ed25519.pub` or `id_rsa` / `id_rsa.pub` depending on how the key pairs were set up. If they don't exist yet, we use this command to create them.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n\n### Create an SSH key pair\n\nTo create an SSH key pair we use this command, where the `-t` option specifies which type of algorithm to use and `-C` attaches a comment to the key (here, your email):\n\n```bash\nssh-keygen -t ed25519 -C \"myemail@email.com\"\n```\n\nIf you are using a legacy system that doesn't support the Ed25519 algorithm, use:\n\n```bash\nssh-keygen -t rsa -b 4096 -C \"myemail@email.com\"\n```\n\n```default\nGenerating public/private ed25519 key pair.\nEnter file in which to save the key (/c/Users/<username>/.ssh/id_ed25519):\n```\n\nWe want to use the default file, so just press `Enter`.\n\n```default\nCreated directory '/c/Users/<username>/.ssh'.\nEnter passphrase (empty for no passphrase):\n```\n\nNow, it is prompting for a passphrase. If you are using a lab laptop that other people sometimes have access to, create a passphrase. Be sure to use something memorable or save your passphrase somewhere, as there is no \"reset my password\" option. Alternatively, if you are using your own laptop, you can leave it empty.\n\n```default\nEnter same passphrase again:\n```\n\nAfter entering the same passphrase a second time, you receive a confirmation that looks something like this:\n\n```default\nYour identification has been saved in /c/Users/<username>/.ssh/id_ed25519\nYour public key has been saved in /c/Users/<username>/.ssh/id_ed25519.pub\nThe key fingerprint is:\nSHA256:SMSPIStNyA00KPxuYu94KpZgRAYjgt9g4BA4kFy3g1o myemail@email.com\nThe key's randomart image is:\n+--[ED25519 256]--+\n|^B== o.          |\n|%*=.*.+          |\n|+=.E =.+         |\n| .=.+.o..        |\n|....  . S        |\n|.+ o             |\n|+ =              |\n|.o.o             |\n|oo+.             |\n+----[SHA256]-----+\n```\n\nThe \"identification\" is actually the private key. You should never share it. The public key is appropriately named. The \"key fingerprint\" is a shorter version of a public key.\n\nNow that we have generated the SSH keys, we will find the SSH files when we check.\n\n```bash\nls -al ~/.ssh\n```\n\n```default\ndrwxr-xr-x 1 <username> 197121   0 Jul 16 14:48 ./\ndrwxr-xr-x 1 <username> 197121   0 Jul 16 14:48 ../\n-rw-r--r-- 1 <username> 197121 419 Jul 16 14:48 id_ed25519\n-rw-r--r-- 1 <username> 197121 106 Jul 16 14:48 id_ed25519.pub\n```\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n\n### Copy the public key to GitHub\n\nNow we have a SSH key pair and we can run this command to check if GitHub can read our authentication.\n\n```bash\nssh -T git@github.com\n```\n\n```default\nThe authenticity of host 'github.com (192.30.255.112)' can't be established.\nRSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? y\nPlease type 'yes', 'no' or the fingerprint: yes\nWarning: Permanently added 'github.com' (RSA) to the list of known hosts.\ngit@github.com: Permission denied (publickey).\n```\n\nRight, we forgot that we need to give GitHub our public key!\n\nFirst, we need to copy the public key. Be sure to include the `.pub` at the end, otherwise you're looking at the private key.\n\n```bash\ncat ~/.ssh/id_ed25519.pub\n```\n\n```default\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDmRA3d51X0uu9wXek559gfn6UFNF69yZjChyBIU2qKI myemail@email.com\n```\n\nNow, going to `github.com`, click on your profile icon in the top right corner to get the drop-down menu. Click \"Settings,\" then on the settings page, click \"SSH and GPG keys,\" on the left side \"Account settings\" menu. Click the \"New SSH key\" button on the right side. Now, you can add the title (e.g. using the title \"MacBook Air\" so you can remember where the original key pair files are located), paste your SSH key into the field, and click the \"Add SSH key\" to complete the setup.\n\nNow that we've set that up, let's check our authentication again from the command line.\n\n```bash\nssh -T git@github.com\n```\n\n```default\nHi stephaniehicks! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\nGood! This output confirms that the SSH key works as intended. We are now ready to push our work to the remote repository.\n\n:::\n\n\n## Push local changes to a remote\n\nAfter your authentication is setup, we can uuse this command to push the changes from our local repository to the repository on GitHub:\n\n```bash\ngit push origin main\n```\n\n::: {.callout-warning}\n\n### Passphrases\n\nIf you set up a passphrase when setting up your SSH key pairs, it will prompt you for it. If you completed advanced settings for your authentication, it will not prompt for a passphrase.\n\n:::\n\n```default\nEnumerating objects: 16, done.\nCounting objects: 100% (16/16), done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (11/11), done.\nWriting objects: 100% (16/16), 1.45 KiB | 372.00 KiB/s, done.\nTotal 16 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), done.\nTo https://github.com/stephaniehicks/planets.git\n * [new branch]      main -> main\n```\n\n\n::: callout-warning\n### Proxy\n\nIf the network you are connected to uses a proxy, there is a chance that your last command failed with \"Could not resolve hostname\" as the error message.\n\nTo solve this issue, you need to tell Git about the proxy using `git config --global`.\n\nSee the [Software Carpentry materials](https://swcarpentry.github.io/git-novice/07-github/index.html#proxy) for details.\n:::\n\n\n::: callout-warning\n### Password Managers\n\nIf your operating system has a password manager configured, `git push` will try to use it when it needs your username and password. For example, this is the default behavior for Git Bash on Windows. If you want to type your username and password at the terminal instead of using a password manager, type:\n\n```bash\nunset SSH_ASKPASS\n```\n\nin the terminal, before you run `git push`.\n:::\n\n\nOK, so now that have we  used `git push`, our local and remote repositories are now in this state:\n\n![](../../images/git/github-repo-after-first-push.svg)\n\n::: callout-tip\n### The `-u` Flag\n\nYou may see a `-u` option used with `git push` in some documentation. This option is synonymous with the `--set-upstream-to` option for the `git branch` command, and is used to associate the current branch with a remote branch so that the `git pull` command can be used without any arguments.\n\nTo do this, use `git push -u origin main` once the remote has been set up.\n:::\n\n\nWe can pull changes from the remote repository to the local one as well:\n\n```bash\ngit pull origin main\n```\n\n```default\nFrom https://github.com/stephaniehicks/planets\n * branch            main     -> FETCH_HEAD\nAlready up-to-date.\n```\n\nPulling has no effect in this case because the two repositories are already synchronized. If someone else had pushed some changes to the repository on GitHub, though, this command would download them to our local repository.\n\n::: callout-important\n### Key Points\n\n-   A local Git repository can be connected to one or more remote repositories.\n-   Use the SSH protocol to connect to remote repositories.\n-   `git push` copies changes from a local repository to a remote repository.\n-   `git pull` copies changes from a remote repository to a local repository.\n:::\n\n\n## Exercises\n\n::: {.callout-tip collapse=\"true\"}\n### GitHub GUI\n\nBrowse to your `planets` repository on GitHub. Under the Code tab, find and click on the text that says \"XX commits\" (where \"XX\" is some number). Hover over, and click on, the three buttons to the right of each commit. What information can you gather/explore from these buttons? How would you get that same information in the shell?\n\n-   The left-most button (with the picture of a clipboard) copies the full identifier of the commit to the clipboard. In the shell, `git log` will show you the full commit identifier for each commit.\n\n-   When you click on the middle button, you'll see all of the changes that were made in that particular commit. Green shaded lines indicate additions and red ones removals. In the shell we can do the same thing with `git diff`. In particular, `git diff ID1..ID2` where ID1 and ID2 are commit identifiers (e.g. `git diff a3bf1e5..041e637`) will show the differences between those two commits.\n\n-   The right-most button lets you view all of the files in the repository at the time of that commit. To do this in the shell, we'd need to checkout the repository at that particular time. We can do this with `git checkout ID` where ID is the identifier of the commit we want to look at. If we do this, we need to remember to put the repository back to the right state afterwards!\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n### Uploading files directly in GitHub browser\n\nGithub also allows you to skip the command line and upload files directly to your repository without having to leave the browser. There are two options. First you can click the \"Upload files\" button in the toolbar at the top of the file tree. Or, you can drag and drop files from your desktop onto the file tree. You can read more about this in the GitHub help pages.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n### GitHub Timestamp\n\nCreate a remote repository on GitHub. Push the contents of your local repository to the remote. Make changes to your local repository and push these changes. Go to the repo you just created on GitHub and check the timestamps of the files. How does GitHub record times, and why?\n\n-   GitHub displays timestamps in a human readable relative format (i.e. \"22 hours ago\" or \"three weeks ago\"). However, if you hover over the timestamp, you can see the exact time at which the last change to the file occurred.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n### Push vs. Commit\n\nIn this lesson, we introduced the `git push` command. How is `git push` different from `git commit`?\n\n-   When we push changes, we're interacting with a remote repository to update it with the changes we've made locally (often this corresponds to sharing the changes we've made with others). Commit only updates your local repository.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n### GitHub License and README files\n\nIn this lesson we learned about creating a remote repository on GitHub, but when you initialized your GitHub repo, you didn't add a README.md or a license file. If you had, what do you think would have happened when you tried to link your local and remote repositories?\n\n-   In this case, we'd see a \"merge conflict\" due to unrelated histories. When GitHub creates a README.md file, it performs a commit in the remote repository. When you try to pull the remote repository to your local repository, Git detects that they have histories that do not share a common origin and refuses to merge.\n\n```bash\ngit pull origin main\n```\n\n```default\nwarning: no common commits\nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/stephaniehicks/planets\n * branch            main     -> FETCH_HEAD\n * [new branch]      main     -> origin/main\nfatal: refusing to merge unrelated histories\n```\n\nYou can force git to merge the two repositories with the option `--allow-unrelated-histories`. Be careful when you use this option and carefully examine the contents of local and remote repositories before merging.\n\n```bash\ngit pull --allow-unrelated-histories origin main\n```\n\n```default\nFrom https://github.com/stephaniehicks/planets\n * branch            main     -> FETCH_HEAD\nMerge made by the 'recursive' strategy.\nREADME.md | 1 +\n1 file changed, 1 insertion(+)\ncreate mode 100644 README.md\n```\n:::\n\n\n\n\n\n# Collaborating\n\n::: callout-note\n### Questions\n\n-   How can I use version control to collaborate with other people?\n:::\n\n\n::: callout-note\n### Objectives\n\n-   Clone a remote repository.\n-   Collaborate by pushing to a common repository.\n-   Describe the basic collaborative workflow.\n:::\n\n\nFor the next step, get into pairs. One person will be the \"Owner\" and the other will be the \"Collaborator\". The goal is that the Collaborator add changes into the Owner's repository. We will switch roles at the end, so both people will play Owner and Collaborator.\n\n\n::: callout-warning\n### Working By Yourself\n\nAlternatively, if you are working through this lesson on your own, you can carry on by opening a second terminal window. This window will represent your partner, working on another computer. You won't need to give anyone access on GitHub, because both 'partners' are you.\n:::\n\n\nThe Owner needs to give the Collaborator access. On GitHub, click the \"Settings\" button on the right, select \"Collaborators\", click \"Add people\", and then enter your partner's username.\n\n![](../../images/git/github-add-collaborators.png)\n\n\nTo accept access to the Owner's repo, the Collaborator needs to go to `https://github.com/notifications` or check for email notification. Once there you can accept access to the Owner's repo.\n\nNext, the Collaborator needs to download a copy of the Owner's repository to their machine. This is called \"cloning a repo\".\n\nThe Collaborator doesn't want to overwrite their own version of `planets.git`, so needs to clone the Owner's repository to a different location than their own repository with the same name.\n\nTo clone the Owner's repo into their Desktop folder, the Collaborator enters:\n\n```bash\ngit clone git@github.com:vlad/planets.git ~/Desktop/vlad-planets\n```\n\nReplace 'vlad' with the Owner's username.\n\n::: {.callout-important}\n\nIf you choose to clone without the clone path (`~/Desktop/vlad-planets`) specified at the end, you will clone inside your own `planets` folder! Make sure to navigate to the Desktop folder first. Alternatively, you can create a directory somewhere else, navigate to it, and run `git clone git@github.com:vlad/planets.git` (without the clone path).\n\n:::\n\n![](../../images/git/github-collaboration.svg)\n\n\nThe Collaborator can now make a change in their clone of the Owner's repository, exactly the same way as we've been doing before.\n\nCreate a new file called `pluto.txt` in the clone of the Owner's repository, and add the following line to it in TextEdit or Notepad.\n\n```default\nIt is so a planet!\n```\n\nCheck from the command line.\n\n```bash\ncd ~/Desktop/vlad-planets\ncat pluto.txt\n```\n\n```default\nIt is so a planet!\n```\n\nAdd and commit the changes.\n\n```bash\ngit add pluto.txt\ngit commit -m \"Add notes about Pluto\"\n```\n\n```default\n 1 file changed, 1 insertion(+)\n create mode 100644 pluto.txt\n```\n\nThen push the change to the _Owner's repository_ on GitHub:\n\n```bash\ngit push origin main\n```\n\n```default\nEnumerating objects: 4, done.\nCounting objects: 4, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 306 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/vlad/planets.git\n   9272da5..29aba7c  main -> main\n```\n\nNote that we **did not have to create a remote called `origin`**: Git uses this name by default when we clone a repository. (This is why `origin` was a sensible choice earlier when we were setting up remotes by hand.)\n\nTake a look at the Owner's repository on GitHub again, and you should be able to see the new commit made by the Collaborator. You may need to refresh your browser to see the new commit.\n\n\n::: {.callout-note collapse=\"true\"}\n## Some more about remotes\n\nThus far, our local repository has had a single \"remote\", called `origin.`\n\nA remote is a copy of the repository that is hosted somewhere else, that we can push to and pull from, and there's no reason that you have to work with only one.\n\nFor example, on some large projects you might have your own copy in your own GitHub account (you'd probably call this `origin`) and also the main \"upstream\" project repository (let's call this `upstream` for the sake of examples). You would pull from `upstream` from time to time to get the latest updates that other people have committed.\n\nRemember that the name you give to a remote only exists locally. It's an alias that you choose - whether `origin`, or `upstream`, or `fred` - and not something intrinsic to the remote repository.\n\nThe `git remote` family of commands is used to set up and alter the remotes associated with a repository. Here are some of the most useful ones:\n\n-   `git remote -v` lists all the remotes that are configured (we already used this in the last episode)\n-   `git remote add [name] [url]` is used to add a new remote\n-   `git remote remove [name]` removes a remote. Note that it doesn't affect the remote repository at all - it just removes the link to it from the local repo.\n-   `git remote set-url [name] [newurl]` changes the URL that is associated with the remote. This is useful if it has moved, e.g. to a different GitHub account, or from GitHub to a different hosting service. Or, if we made a typo when adding it!\n-   `git remote rename [oldname] [newname]` changes the local alias by which a remote is known - its name. For example, one could use this to change `upstream` to `fred`.\n:::\n\n\nTo download the Collaborator's changes from GitHub, the Owner now enters:\n\n```bash\ngit pull origin main\n```\n\n```default\nremote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/vlad/planets\n * branch            main     -> FETCH_HEAD\n   9272da5..29aba7c  main     -> origin/main\nUpdating 9272da5..29aba7c\nFast-forward\n pluto.txt | 1 +\n 1 file changed, 1 insertion(+)\n create mode 100644 pluto.txt\n```\n\nNow the three repositories (Owner's local, Collaborator's local, and Owner's on GitHub) are back in sync.\n\n\n::: callout-note\n## A Basic Collaborative Workflow\n\nIn practice, it is good to be sure that you have an updated version of the repository you are collaborating on, so you should `git pull` before making our changes. The basic collaborative workflow would be:\n\n-   update your local repo with `git pull origin main`,\n-   make your changes and stage them with `git add`,\n-   commit your changes with `git commit -m`, and\n-   upload the changes to GitHub with `git push origin main`\n\nIt is better to make many commits with smaller changes rather than one commit with massive changes: small commits are easier to read and review.\n:::\n\n\n::: callout-important\n### Key Points\n\n-   `git clone` copies a remote repository to create a local repository with a remote called `origin` automatically set up.\n:::\n\n\n## Exercises\n\n::: {.callout-tip collapse=\"true\"}\n### Switch Roles and Repeat\n\nSwitch roles and repeat the whole process.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n### Review Changes\n\nThe Owner pushed commits to the repository without giving any information to the Collaborator. How can the Collaborator find out what has changed with command line? And on GitHub?\n\n-   On the command line, the Collaborator can use `git fetch origin main` to get the remote changes into the local repository, but without merging them. Then by running `git diff main origin/main` the Collaborator will see the changes output in the terminal.\n\n-   On GitHub, the Collaborator can go to the repository and click on \"commits\" to view the most recent commits pushed to the repository.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n### Comment Changes in GitHub\n\nThe Collaborator has some questions about one line change made by the Owner and has some suggestions to propose.\n\nWith GitHub, it is possible to comment on the diff of a commit. Over the line of code to comment, a blue comment icon appears to open a comment window.\n\nThe Collaborator posts their comments and suggestions using the GitHub interface.\n:::\n\n\n# Conflicts\n\n::: callout-note\n### Questions\n\n-   What do I do when my changes conflict with someone else's?\n:::\n\n\n::: callout-note\n### Objectives\n\n-   Explain what conflicts are and when they can occur.\n\n-   Resolve conflicts resulting from a merge.\n:::\n\n\nAs soon as people can work in parallel, they will likely step on each other's toes. This will even happen with a single person: if we are working on a piece of software on both our laptop and a server in the lab, we could make different changes to each copy. Version control helps us manage these conflicts by giving us tools to resolve overlapping changes.\n\nTo see how we can resolve conflicts, we must first create one. The file `mars.txt` currently looks like this in both partners' copies of our `planets` repository:\n\n```bash\ncat mars.txt\n```\n\n```default\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\n```\n\nLet's add a line to the collaborator's copy only:\n\n```bash\ncat mars.txt\n```\n\n```default\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\nThis line added to Wolfman's copy\n```\n\nand then push the change to GitHub:\n\n```bash\ngit add mars.txt\ngit commit -m \"Add a line in our home copy\"\n```\n\n```default\n[main 5ae9631] Add a line in our home copy\n 1 file changed, 1 insertion(+)\n```\n\n```bash\ngit push origin main\n```\n\n```default\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 331 bytes | 331.00 KiB/s, done.\nTotal 3 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nTo https://github.com/vlad/planets.git\n   29aba7c..dabb4c8  main -> main\n```\n\nNow let's have the owner make a different change to their copy _without_ updating from GitHub (i.e. without the Owner using `git pull origin main`):\n\n```bash\ncat mars.txt\n```\n\n```default\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\nWe added a different line in the other copy\n```\n\nWe can commit the change locally:\n\n```bash\ngit add mars.txt\ngit commit -m \"Add a line in my copy\"\n```\n\n```default\n[main 07ebc69] Add a line in my copy\n 1 file changed, 1 insertion(+)\n```\n\nbut Git will not let us push it to GitHub:\n\n```bash\ngit push origin main\n```\n\n```default\nTo https://github.com/vlad/planets.git\n ! [rejected]        main -> main (fetch first)\nerror: failed to push some refs to 'https://github.com/vlad/planets.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n```\n\n(See [illustration](https://swcarpentry.github.io/git-novice/09-conflict/index.html#overview) on the Software Carpentry website.)\n\n\nGit **rejects the `git push`** because it detects that the remote repository has new updates that have not been incorporated into the local branch. \n\nWhat we have to do is pull the changes from GitHub, merge them into the copy we are currently working in, and then push that. \n\nLet’s start by pulling:\n\n```bash\ngit pull origin main\n```\n\n```default\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (1/1), done.\nremote: Total 3 (delta 2), reused 3 (delta 2), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/vlad/planets\n * branch            main     -> FETCH_HEAD\n    29aba7c..dabb4c8  main     -> origin/main\nAuto-merging mars.txt\nCONFLICT (content): Merge conflict in mars.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n\nThe `git pull` command updates the local repository to include those changes already included in the remote repository. \n\nAfter the changes from remote branch have been fetched, Git detects that changes made to the local copy overlap with those made to the remote repository, and therefore refuses to merge the two versions to stop us from trampling on our previous work. \n\nThe conflict is marked in in the affected file:\n\n```bash\ncat mars.txt\n```\n\n```default\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\n<<<<<<< HEAD\nWe added a different line in the other copy\n=======\nThis line added to Wolfman's copy\n>>>>>>> dabb4c8c450e8475aee9b14b4383acc99f42af1d\n```\n\nOur change is preceded by `<<<<<<< HEAD`. Git has then inserted `=======` as a separator between the conflicting changes and marked the end of the content downloaded from GitHub with `>>>>>>>`.\n\n::: .callout-note \nThe string of letters and digits after that marker identifies the commit we've just downloaded. \n:::\n\nIt is now up to us to edit this file to remove these markers and reconcile the changes. We can do anything we want: keep the change made in the local repository, keep the change made in the remote repository, write something new to replace both, or get rid of the change entirely. Let's replace both so that the file looks like this:\n\n```bash\ncat mars.txt\n```\n\n```default\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\nWe removed the conflict on this line\n```\n\nTo finish merging, we add `mars.txt` to the changes being made by the merge and then commit:\n\n```bash\ngit add mars.txt\ngit status\n```\n\n```default\nOn branch main\nAll conflicts fixed but you are still merging.\n  (use \"git commit\" to conclude merge)\n\nChanges to be committed:\n\n\tmodified:   mars.txt\n\n```\n\n```bash\ngit commit -m \"Merge changes from GitHub\"\n```\n\n```default\n[main 2abf2b1] Merge changes from GitHub\n```\n\nNow we can push our changes to GitHub:\n\n```bash\ngit push origin main\n```\n\n```default\nEnumerating objects: 10, done.\nCounting objects: 100% (10/10), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (6/6), 645 bytes | 645.00 KiB/s, done.\nTotal 6 (delta 4), reused 0 (delta 0)\nremote: Resolving deltas: 100% (4/4), completed with 2 local objects.\nTo https://github.com/vlad/planets.git\n   dabb4c8..2abf2b1  main -> main\n```\n\nGit keeps track of what we've merged with what, so we don't have to fix things by hand again when the collaborator who made the first change pulls again:\n\n```bash\ngit pull origin main\n```\n\n```default\nremote: Enumerating objects: 10, done.\nremote: Counting objects: 100% (10/10), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 6 (delta 4), reused 6 (delta 4), pack-reused 0\nUnpacking objects: 100% (6/6), done.\nFrom https://github.com/vlad/planets\n * branch            main     -> FETCH_HEAD\n    dabb4c8..2abf2b1  main     -> origin/main\nUpdating dabb4c8..2abf2b1\nFast-forward\n mars.txt | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n```\n\nWe get the merged file:\n\n```bash\ncat mars.txt\n```\n\n```default\nCold and dry, but everything is my favorite color\nThe two moons may be a problem for Wolfman\nBut the Mummy will appreciate the lack of humidity\nWe removed the conflict on this line\n```\n\nWe dont need to merge again because Git knows someone has already done that.\n\nGit's ability to resolve conflicts is very useful, but conflict resolution costs time and effort, and can introduce errors if conflicts are not resolved correctly. If you find yourself resolving a lot of conflicts in a project, consider these technical approaches to reducing them:\n\n-   Pull from upstream more frequently, especially before starting new work\n-   Use topic branches to segregate work, merging to main when complete\n-   Make smaller commits\n-   Where logically appropriate, break large files into smaller ones so that it is less likely that two authors will alter the same file simultaneously\n\nConflicts can also be minimized with project management strategies:\n\n-   Clarify who is responsible for what areas with your collaborators\n-   Discuss what order tasks should be carried out in with your collaborators so that tasks expected to change the same lines won't be worked on simultaneously\n-   If the conflicts are stylistic (e.g. tabs vs. spaces), establish a project convention that is governing and use code style tools to enforce, if necessary\n\n::: callout-important\n### Key Points\n\n-   Conflicts occur when two or more people change the same lines of the same file.\n-   The version control system does not allow people to overwrite each other's changes blindly, but highlights conflicts so that they can be resolved.\n:::\n\n## Exercises\n\n::: {.callout-tip collapse=\"true\"}\n### Conflicts on Non-textual files\n\nWhat does Git do when there is a conflict in an image or some other non-textual file that is stored in version control (e.g. `mars.jpg`)?\n\n-   Git will return an additional warning in the merge conflict message:\n\n```default\nwarning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\n```\n\nGit cannot automatically insert conflict markers into an image as it does for text files. So, instead of editing the image file, we must check out the version we want to keep. Then we can add and commit this version.\n\nWe can also keep both images if we give them different filenames and then add and commit them.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n### A Typical Work Session\n\nA short example of a typical workflow in an order that will minimize merge conflicts:\n\n-   Update local repo: `git pull origin main`\n-   Make changes: e.g. `echo 100 >> numbers.txt`\n-   Stage changes: `git add numbers.txt`\n-   Commit changes: `git commit -m \"Add 100 to numbers.txt\"`\n-   Update remote: `git push origin main`\n:::\n\n\n\n\n\n\n# Post-lecture materials\n\nThere are other resources available on the [Software Carpentry](https://swcarpentry.github.io/git-novice)'s website in particularly around: \n\n- The importance of how version control can help your work more open and support [Open Science](https://swcarpentry.github.io/git-novice/10-open.html). Open scientific work is more useful and more highly cited than closed. \n- What type of licensing should you consider to include with your work on [Licensing](https://swcarpentry.github.io/git-novice/11-licensing.html). \n- How to make your work easier to cite with the less on [Citations](https://swcarpentry.github.io/git-novice/12-citation.html). \n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}